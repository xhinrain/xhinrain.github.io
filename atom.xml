<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XieHao&#39;s Blog</title>
  
  <subtitle>我当然是在扯淡</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-19T07:14:01.906Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xie Hao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM笔记（一）：自动内存管理机制</title>
    <link href="http://yoursite.com/2018/03/14/jvm-1/"/>
    <id>http://yoursite.com/2018/03/14/jvm-1/</id>
    <published>2018-03-14T10:25:11.000Z</published>
    <updated>2018-03-19T07:14:01.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java运行时数据区"><a href="#Java运行时数据区" class="headerlink" title="Java运行时数据区"></a>Java运行时数据区</h2><p><img src="http://p5ks54q34.bkt.clouddn.com/jvm1/jvm1.jpg" alt="jvm1"></p><p>线程私有：</p><ol><li><strong>程序计数器</strong>：当前线程所执行的字节码的行号指示器。字节码解释器通过程序计数器的值来取下一条需要执行的字节码指令。</li><li><strong>虚拟机栈</strong>：虚拟机栈描述的是Java方法执行的内存模型，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。局部变量变存放各种基本数据类型（boolean、byte、char、short、int、float、long、double）和对象引用（引用指针）。</li><li><strong>本地方法栈</strong>：与虚拟机栈类似，不过描述的是Native方法执行的内存模型（可能是其他语言的本地方法库）。</li></ol><p>线程共享：</p><ol><li><strong>Java堆</strong>：用以存放对象实例和数组的内存区域。也是垃圾收集的主要区域，故也称GC堆。在物理上，Java堆的内存空间可以是不连续的，只要逻辑上是连续的即可；在实现上，可以是扩展的也可以是固定的。</li><li><strong>方法区</strong>：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。有的人称为“永久代”。这个区域不需要连续的内存区域，以及可以选择固定大小或者可扩展，还可以选择不实现垃圾回收。方法区的垃圾回收主要针对常量池（存放编译期生成的字面量和符号引用）的回收和对类型的卸载。</li></ol><h2 id="虚拟机对象"><a href="#虚拟机对象" class="headerlink" title="虚拟机对象"></a>虚拟机对象</h2><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p>在虚拟机中，对象的创建过程：</p><ol><li>遇到一个new指令后，检查：<ul><li>指令的参数是否能在常量池中定位到一个类的符号引用。</li><li>这个符号引用代表的类是否已被加载、解析和初始化。没有则执行相应的类加载过程。</li></ul></li><li>为新生对象分配内存。分配方式有：<ul><li>指针碰撞：Java堆中的内存是绝对规整的，一边是已分配区域，一边是空闲区域，移动中间的指针进行分配。</li><li>空闲列表：Java堆中的内存是不规整的。虚拟机维护一个列表记录空闲的内存块。</li></ul></li><li>内存分配完后，虚拟机将分配到的内存空间都初始化为零值（不包括对象头），这样使得对象实例字段可以不赋初值就可以直接使用（比如int型字段初始为0）。</li><li>虚拟机为对象进行必要的设置，比如为对象头的内容进行设置。</li></ol><h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h3><p>对象的内存布局分为3块区域：对象头、实例数据、对齐填充。</p><ol><li><strong>对象头</strong>。分为两部分：<ul><li>运行时数据：哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳。</li><li>类型指针：对象指向它的类元数据的指针。</li></ul></li><li><strong>实例数据</strong>：真正存储的有效信息，也是在程序代码中定义的各种类型的字段内容（包括从父类继承下来的）。</li><li><strong>对齐填充</strong>：只起到占位符的作用，系统要求对象的大小必须是8字节的整数倍。</li></ol><h3 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h3><p>Java程序通过虚拟机栈中的局部变量表保存的对象引用（reference）来操作具体对象。通过reference类型的数据访问对象的方式主要有两种：使用句柄和直接指针。</p><h4 id="使用句柄"><a href="#使用句柄" class="headerlink" title="使用句柄"></a>使用句柄</h4><p>使用句柄的访问方式时，Java堆会划分出一块内存作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含对象实例数据与类型数据。这种方式的好处是reference存储的稳定的句柄地址，当对象移动时只需要改变句柄中的实例数据指针，而reference不需要改变。</p><p><img src="http://p5ks54q34.bkt.clouddn.com/jvm2.jpg" alt="img"></p><h4 id="直接指针"><a href="#直接指针" class="headerlink" title="直接指针"></a>直接指针</h4><p>使用直接指针方式，reference中存储的直接就是对象地址。这种方式的好处是速度更快，只需要一次指针定位。</p><p><img src="http://p5ks54q34.bkt.clouddn.com/jvm1/jjvm3.jpg" alt="jvm3"></p><h2 id="关于引用"><a href="#关于引用" class="headerlink" title="关于引用"></a>关于引用</h2><p>Java将引用分为强引用、软引用、弱引用、虚引用。</p><ol><li><strong>强引用</strong>：在代码中普遍存在的，类似于<code>Object obj = new Object()</code>这类的引用。</li><li><strong>软引用</strong>：用来描述 一些还有用但并非必需的对象。对于软引用的对象，在系统将要发生内存溢出异常之前， 将会把这些对象列进回收范围之中进行第二次回收。</li><li><strong>弱引用</strong>：也是用来描述非必需对象的，而且比软引用更弱一些，当垃圾收集器工作时，无论当前内存是否足够，都会 回收掉只被弱引用关联的对象。</li><li><strong>虚引用</strong>：虚引用是最弱的一种引用关系。 一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</li></ol><h2 id="回收对象判断"><a href="#回收对象判断" class="headerlink" title="回收对象判断"></a>回收对象判断</h2><p>垃圾收集器在对堆进行回收之前，先要判断哪些对象已死，哪些对象还存活着。判断对象是否存活主要有两种方法：引用计数算法和可达性分析算法。主流的程序语言一般都是采用可达性分析算法来实现，包括Java。</p><ol><li><strong>引用计数算法</strong>：给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；引用失效时，计数器值就减1，计数器为0的对象就是不可使用的。这种方法实现简单、效率高，但很难解决对象之间相互循环引用的问题。</li><li><strong>可达性分析算法</strong>：通过一系列的称为”GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连（即GC Roots到这个对象不可达） 时， 则证明此对象是不可用的。</li></ol><p><img src="http://p5ks54q34.bkt.clouddn.com/jvm1/jjvm4.jpg" alt="jvm4"></p><p>在可达性分析算法中不可达的对象， 不会立即被回收，要真正宣告一个对象死亡，至少要经历两次标记过程：</p><ol><li>第一次标记：对象在进行可达性分析后发现不可达，将会被第一次标记并且进行一次筛选，即此对象是否有必要执行finalize() 方法：<ul><li>没有必要执行：对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过。</li><li>有必要执行：这个对象将放置在F-Queue队列之中，并在稍后由低优先级的Finalizer线程去执行它。</li></ul></li><li>第二次标记：在执行finalize()后，GC将对F-Queue中的对象进行第二次小规模的标记：<ul><li>如果对象在finalize()中重新与引用链上的任何一个对象建立关联（如把自己（ this 关键字）赋值给某个类变量或者对象的成员变量），那在第二次标记时它将被移除出“ 即将回收” 的集合。</li><li>如果对象没有关联上引用链上的对象，那基本上就真的被回收了。</li></ul></li></ol><blockquote><p><strong>Note:</strong><br>可作为GC Roots的节点主要在全局性的引用（例如常量或类静态属性）与执行上下文（例如栈帧中的本地变量表）中，一般包括：</p><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象。</li><li>方法区中类静态属性引用的对象。</li><li>方法区中常量引用的对象。</li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象。</li></ul></blockquote><h2 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h2><p>方法区（或者HotSpot虚拟机中的永久代）的垃圾收集通常效率很低，在Java虚拟机规范中可以不要求垃圾收集。方法区的垃圾收集主要回收两部分内容：废弃常量和无用的类。</p><ol><li>废弃常量：以常量池中字面量的回收为例，假如一个字符串”abc”已经进入了常量池中，但是当前系统没有任何一个String对象是叫做”abc”的，即没有任何String对象引用常量池中的”abc”常量，这个时候，这个” abc” 常量可以被清理 出常量池。常量池中的其他类（ 接口）、方法、字段的符号引用也与此类似。 </li><li>无用类：虚拟机可以对判定为无用的类进行回收，判定一个类是“无用的类”的条件：<ul><li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li><li>加载该类的ClassLoader已经被回收。</li><li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。 </li></ul></li></ol><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>标记-清除（Mark-Sweep）算法分为标记和清除两个阶段：</p><ol><li>标记出所有需要回收的对象，一般用可达性分析算法进行标记。</li><li>对所有被标记的对象进行统一回收。  </li></ol><p>这种算法的不足主要有两个：</p><ul><li>效率问题。标记、清除的效率都不高。</li><li>空间问题。标记清除后会产生大量不连续的内存碎片。</li></ul><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>复制（Copying）算法：将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p><p>复制算法在当前商用的虚拟机中一般用来回收<strong>新生代</strong>，将新生代的内存区域分为三个部分，一个Eden空间，两个Survivor空间：</p><ul><li>Eden空间，占80%。</li><li>Survivor空间：From 和 To，占20%。</li></ul><p>内存分配时，只使用Eden和其中一块Survivor。当回收时，将Eden和一块Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8：1，也就是每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的内存会被“浪费”。根据研究表明，新生代的对象98%会在第一次GC中被回收，因此将活着的对象复制到一块Survivor中是可行的，但如果Survivor空间不够用，则需要依赖其他内存（这里指老年代）进行分配担保（Handle Promotion）。</p><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>标记-整理（ Mark- Compact）算法，主要适用于<strong>老年代</strong>。标记过程仍然与“ 标记-清除” 算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>这种算法并没有什么新的思想，只是根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。</p><ul><li>新生代：复制算法。</li><li>老年代：标记—清理 或者 标记—整理</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java运行时数据区&quot;&gt;&lt;a href=&quot;#Java运行时数据区&quot; class=&quot;headerlink&quot; title=&quot;Java运行时数据区&quot;&gt;&lt;/a&gt;Java运行时数据区&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://p5ks54q34.bkt.clouddn
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的遍历总结</title>
    <link href="http://yoursite.com/2018/03/10/BinaryTree/"/>
    <id>http://yoursite.com/2018/03/10/BinaryTree/</id>
    <published>2018-03-10T02:13:34.000Z</published>
    <updated>2018-03-10T02:21:44.889Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树的遍历主要有先序、中序、后序以及层序遍历四种。前三种遍历分别有递归和非递归两种方式，本文总结了这7种遍历的实现。</p><ul><li>先序遍历：根节点 -&gt; 左孩子 -&gt; 右孩子</li><li>中序遍历：左孩子 -&gt; 根节点 -&gt; 右孩子</li><li>后序遍历：左孩子 -&gt; 右孩子 -&gt; 根节点</li><li>层序遍历：从上往下逐层访问，每一层从左往右。</li></ul><h2 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h2><blockquote><p>二叉树的先序、中序、后序的递归实现非常简单，大多数时候采用递归的方式。</p></blockquote><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先序遍历 递归</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(BinaryTreeNode root)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</div><div class="line">    visit(root);</div><div class="line">    preOrder_1(root.left);</div><div class="line">    preOrder_1(root.right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//中序遍历 递归</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(BinaryTreeNode root)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</div><div class="line">        inOrder(root.left);</div><div class="line">        visit(root);</div><div class="line">        inOrder(root.right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//后序遍历 递归</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(BinaryTreeNode root)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</div><div class="line">        postOrder(root.left);</div><div class="line">        postOrder(root.right);</div><div class="line">        visit(root);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h2><h3 id="先序遍历-1"><a href="#先序遍历-1" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>先序遍历的顺序是根节点 -&gt; 左孩子 -&gt; 右孩子，我们需要一个辅组栈来节点。对于一颗二叉树可以分为根节点、左孩子、右孩子三个部分，在左右孩子中可以继续分为根节点、左孩子、右孩子三个部分。对于这三个部分进行以下操作：</p><ol><li>访问当前节点（一开始为根节点），打印输出，并入栈。再看其左孩子是否为空。</li><li>若当前节点的左孩子不为空，则更新当前节点为其左孩子节点，回到1。</li><li>若当前节点的左孩子为空，弹出栈顶元素，更新当前节点为栈顶元素的右孩子，回到1。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先序遍历 非递归</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(BinaryTreeNode root)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    BinaryTreeNode node = root;</div><div class="line">   Stack&lt;BinaryTreeNode&gt; stack = <span class="keyword">new</span> Stack();</div><div class="line">    <span class="keyword">while</span>(node != <span class="keyword">null</span> || !stack.isEmpty())&#123;</div><div class="line">    <span class="keyword">while</span>(node != <span class="keyword">null</span>)&#123;<span class="comment">//一直到最左边节点</span></div><div class="line">        visit(node);</div><div class="line">            stack.push(node);</div><div class="line">            node = node.left;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!stack.isEmpty())&#123;</div><div class="line">        node = stack.pop();</div><div class="line">            node = node.right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>中序遍历与先序遍历的思路大致相同，按照以下步骤进行：</p><ol><li>将当前节点入栈，再看左孩子是否为空。</li><li>若当前节点的左孩子不为空，则更新当前节点为其左孩子节点，回到1。</li><li>若当前节点的左孩子为空，弹出栈顶元素，并且访问输出，更新当前节点为栈顶元素的右孩子，回到1。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//中序遍历 非递归</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(BinaryTreeNode root)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    BinaryTreeNode node = root;</div><div class="line">    Stack&lt;BinaryTreeNode&gt; stack = <span class="keyword">new</span> Stack();</div><div class="line">    <span class="keyword">while</span>(node != <span class="keyword">null</span> || !stack.isEmpty())&#123;</div><div class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>)&#123;<span class="comment">//一直到最左边节点</span></div><div class="line">            stack.push(node);</div><div class="line">            node = node.left;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!stack.isEmpty())&#123;</div><div class="line">            node = stack.pop();</div><div class="line">            visit(node);</div><div class="line">            node = node.right;</div><div class="line">        &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>后序遍历的非递归实现稍微复杂了一点，由于后序的顺序是左孩子 -&gt; 右孩子 -&gt; 根节点，所以我们需要两次访问根节点：第一次访问根节点用来将其左右孩子入栈；第二次访问根节点输出节点信息。为了判别是第几次访问根节点，我们需要用一个指针来记录上一次访问的节点。如果上一次访问的是左右孩子则这一次将是第二次访问根节点，需要输出节点信息。操作步骤如下：</p><ol><li>根节点入栈。</li><li>cur指针指向栈顶元素。</li><li>若cur节点没有孩子节点或者孩子节点都已经被访问过了，则输出当前节点信息，出栈cur元素，用pre指针保存该元素。</li><li>若cur节点有孩子节点且没有访问过，则一次入栈右孩子、左孩子。回到2。</li><li>直到栈空。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//后序遍历 非递归</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrder_2</span><span class="params">(BinaryTreeNode root)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    Stack&lt;BinaryTreeNode&gt; stack = <span class="keyword">new</span> Stack();</div><div class="line">    BinaryTreeNode cur;         <span class="comment">//当前结点</span></div><div class="line">    BinaryTreeNode pre = <span class="keyword">null</span>;  <span class="comment">//前一次访问的结点</span></div><div class="line">    stack.push(root);</div><div class="line">    <span class="keyword">while</span>(!stack.empty()) &#123;</div><div class="line">        cur=stack.peek();</div><div class="line">        <span class="comment">//如果 当前节点没有孩子节点 || 孩子节点都已经被访问过了</span></div><div class="line">        <span class="keyword">if</span>((cur.left == <span class="keyword">null</span> &amp;&amp; cur.right == <span class="keyword">null</span>) ||</div><div class="line">           (pre != <span class="keyword">null</span> &amp;&amp; (pre == cur.left || pre == cur.right))) &#123;</div><div class="line">            visit(cur);</div><div class="line">            stack.pop();</div><div class="line">            pre = cur;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//先入栈右孩子再入栈左孩子，这样出栈的顺序才是先左后右</span></div><div class="line">            <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>)</div><div class="line">                stack.push(cur.right);</div><div class="line">            <span class="keyword">if</span>(cur.left != <span class="keyword">null</span>)</div><div class="line">                stack.push(cur.left);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><p>二叉树的层序遍历是从上到下，从左到右依次访问。采用队列实现，即从上到下、从左到右依次入队。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(BinaryTreeNode root)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    Queue&lt;BinaryTreeNode&gt; queue = <span class="keyword">new</span> LinkedList();</div><div class="line">    queue.offer(root);</div><div class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</div><div class="line">        BinaryTreeNode node = queue.poll();</div><div class="line">        visit(node);</div><div class="line">        <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)</div><div class="line">            queue.offer(node.left);</div><div class="line">        <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)</div><div class="line">            queue.offer(node.right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;二叉树的遍历主要有先序、中序、后序以及层序遍历四种。前三种遍历分别有递归和非递归两种方式，本文总结了这7种遍历的实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先序遍历：根节点 -&amp;gt; 左孩子 -&amp;gt; 右孩子&lt;/li&gt;
&lt;li&gt;中序遍历：左孩子 -&amp;gt; 根节点 -&amp;gt; 右
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
</feed>
